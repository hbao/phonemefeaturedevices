#
#
# Copyright  2008  Sun Microsystems, Inc. All rights reserved.
#

    Access control permissions and PIN properties can be specified
in text files. When the first APDU or JCRMI connection is established
the implementation reads ACL and PIN data from files acl_<slot number>
in appdb directory. If the file is absent or contains errors, access
control verification for this slot is disabled.

    File should contain 'pin_data' and 'acf' records.
    
    'pin_data' record contains description of PIN properties:

    pin_data {
    	label     <string>
    	id        <number>
        type      <bcd | ascii | utf | half-nibble | iso>
        min       <minLength> -  
        stored    <storedLength>
        max       <maxLength>
        reference <byte>
        pad       <byte>   - optional
        flag      <case-sensitive | change-disabled |
                   unblock-disabled | needs-padding |
                   disable-allowed | unblockingPIN>
    }

    'acf' record contains data about application permissions:

    acf [<AID - numbers separated by blanks>] {

        ace {
            root <CA name>
            ...

            apdu {
                <8 numbers separated by blanks>
                ...
            }
            ...
            jcrmi {
                 classes {
                     <class name>
                     ...
                 }
                 hashModifier <string>
                 methods {
                     <method name and signatiure>
                     ...
                }
            }
            ...
            pin_apdu {
                id <number>
                <verify | change | disable | enable | unblock>
                <4 hexadecimal numbers>
                ...
            }
            ...
            pin_jcrmi {
                id <number>
                <verify | change | disable | enable | unblock>
                <method name and signatiure>
                ...
            }
            ...
        }
        ...
    }

    Access control file is represented by ACF record. AID after
'acf' string identifies the application. A missing AID indicates
that the entry is related to all applications. ACF record can
contain 'ace' records. If there are no ACE records, access to
application is restricted by this ACF. For example, this ACF:

    acf{}

    restricts access to all applications on card (other ACFs
can allow access).

    ACE record represents Access Control Entry. It may contain
'root', 'apdu', 'jcrmi', 'pin_apdu' and 'pin_jcrmi' records. 

    'root' record contains one CA name. If the MIDlet suite was
authorised using certificate issued by this CA, this ACL grants
access to this MIDlet. A missing 'root' fields indicate that
the ACE applies to all identified parties. One principal is
described by one line. This line must contain only word 'root'
and the principal name. Example:

    root CN=thehost;OU=JCT;O=dummy CA;L=Santa Clara;ST=CA;C=US

    'apdu' or 'jcrmi' record describes APDU or JCRMI permission.
A missing permission records indicate that all operations are
allowed.

    APDU permission contains one or more sequences of 8
hexadecimal values separated by blanks. First four bytes describe
the APDU command and other four bytes - the mask. Example:

    apdu {
        0 20  0 82  0 20  0 82
       80 20  0  0 ff ff  0  0
    }
    
    JCRMI permission contains information about hash modifier
(optional), class list and method list (optional). If the list of
methods is empty, J2ME application is allowed to invoke all remote
methods of interfaces in the list of classes. Example:

    jcrmi {
        classes {
            com.sun.javacard.samples.RMIDemo.Purse
        }
        hashModifier zzz
        methods {
            debit(S)V
            setAccountNumber([B)V
            getAccountNumber()[B
        }
    }

    All the numbers are hexadecimal. Tabulation, blank, CR and LF
symbols are used as separators. Separators can be omitted before
and after symbols '{' and '}'. So, JCRMI permission above is
equivalent to:

    jcrmi{classes{com.sun.javacard.samples.RMIDemo.Purse}
        hashModifier zzz methods{debit(S)V setAccountNumber([B)V
        getAccountNumber()[B}}


    'pin_apdu' and 'pin_jcrmi' records contain information necessary
for PIN entry methods - PIN identifier and APDU command headers or
remote method names.

    Here is an example of text file:

    pin_data {
        label     Unblock pin
        id        44
        type      utf
        min       4
        stored    8
        max       8
        reference 33
        pad       ff
        flag      needs-padding                         	
        flag      unblockingPIN
    }                                                   
                                                    
                                                    
    pin_data {                                          
    	label     Main pin                          
    	id        55                                
        type      half-nibble
        min       4
        stored    8
        max       8
        reference 12
        pad       ff
        flag      disable-allowed
        flag      needs-padding
    }               
                
    acf a0 0 0 0 62 ff 1 {
        ace {
            root CN=thehost;OU=JCT;O=dummy CA;L=Santa Clara;ST=CA;C=US
		        
            pin_jcrmi {
                id 55
                verify enterPIN([B)S
                change changePIN([B[B)S
                disable disablePIN([B)S
                enable enablePIN([B)S
                unblock unblockPIN([B[B)S
            }
        }
    }

    acf a0 0 0 0 62 ee 1 {
        ace {
            root CN=thehost;OU=JCT;O=dummy CA;L=Santa Clara;ST=CA;C=US

            pin_apdu {
                id 55
                verify 1 2 3 1
                change 4 3 2 2
                disable 1 1 1 3 
                enable 5 5 5 4
                unblock 7 7 7 5
           }
       }
    }

    acf a0 0 0 0 62 3 1 c 8 1 {
        ace {
            root CN=thehost;OU=JCT;O=dummy CA;L=Santa Clara;ST=CA;C=US
            root yyy

            jcrmi {
                classes {
                    com.sun.javacard.samples.RMIDemo.Purse
                }
                hashModifier xxx
                methods {
                    setAccountNumber([B)V
                    getBalance()S
                    credit(S)V
                }
            }
        }
        ace {
            jcrmi {
                classes {
                    com.sun.javacard.samples.RMIDemo.Purse
                }
                methods {
                    debit(S)V
                    getAccountNumber()[B
                }
            }
        }
    }
 
    acf a0 00 00 00 62 03 01 0c 02 01 {
        ace {
            root CN=thehost;OU=JCT;O=dummy CA;L=Santa Clara;ST=CA;C=US
            apdu {
                 0 20  0 82  0 20  0 82
                80 20  0  0 ff ff  0  0
            }
            apdu {
                80 22  0  0 ff ff  0  0 
            }
        }
    }

    acf a0 00 00 00 62 03 01 0c 06 01 {
        ace {
            root CN=thehost;OU=JCT;O=dummy CA;L=Santa Clara;ST=CA;C=US
            apdu {
                80 20  0  0 ff ff  0  0
                80 30  0  0 ff ff  0  0
                80 50  0  0 ff ff  0  0
            }
        }
    }
